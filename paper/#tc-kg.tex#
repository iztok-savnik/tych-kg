\documentclass[runningheads]{llncs}

\pdfoutput=1
\usepackage{times}
\normalfont
\usepackage{latexsym}
\usepackage[T1]{fontenc}
\usepackage[noend]{algpseudocode}
\usepackage{algorithm}
\usepackage{graphicx}
\usepackage{wrapfig}
\usepackage{verbatim}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{stmaryrd}
\usepackage{graphics}
\usepackage{color}
\usepackage{url}

% symbols
\newcommand{\ul}{\underline} 
\newcommand{\ol}{\overline} 
\newcommand{\darr}{\downarrow} 
\newcommand{\uarr}{\uparrow} 
\newcommand{\D}{{\cal D}} 
\newcommand{\U}{{\cal U}} 
\newcommand{\B}{{\cal B}} 
\newcommand{\Lt}{{\cal L}} 
\newcommand{\St}{{\cal St}} 
\newcommand{\Pt}{{\cal Pt}} 
\newcommand{\Ot}{{\cal Ot}} 
\newcommand{\I}{{\cal I}} 
\newcommand{\Ii}{{\cal I}_i} 
\newcommand{\Ic}{{\cal I}_c} 
\newcommand{\Ip}{{\cal I}_p}
\newcommand{\T}{{\cal T}}
\newcommand{\Ti}{{\cal T}_i}
\newcommand{\Tt}{{\cal T}_t}
\newcommand{\cl}{\text{:}} 
\newcommand{\rdftype}{\text{rdf:type}} 
\newcommand{\rdfsubcl}{\text{rdfs:subClassOf}} 
\newcommand{\rdfsubclpl}{\text{rdfs:subClassOf+}} 
\newcommand{\rdfsubprop}{\text{rdfs:subPropertyOf}} 
\newcommand{\rdfsubproppl}{\text{rdfs:subPropertyOf+}} 
\newcommand{\rdfsdomain}{\text{rdfs:domain}} 
\newcommand{\rdfsrange}{\text{rdfs:range}} 
\newcommand{\finbox}{\phantom{.}\hfill\Box}
\newcommand{\nl}{\hfill\break}
\newcommand{\vb}[1]{\begin{small}\texttt{#1}\end{small}}
\newcommand{\lub}{l}
\newcommand{\memo}[1]{}
\newcommand{\notes}[1]{\noindent\begin{small}-- \emph{#1}\\\end{small}}
 
\def\ojoin{\setbox0=\hbox{$\bowtie$}%
  \rule[-.02ex]{.25em}{.4pt}\llap{\rule[\ht0]{.25em}{.4pt}}}
\def\leftouterjoin{\mathbin{\ojoin\mkern-5.8mu\bowtie}}
\def\rightouterjoin{\mathbin{\bowtie\mkern-5.8mu\ojoin}}
\def\fullouterjoin{\mathbin{\ojoin\mkern-5.8mu\bowtie\mkern-5.8mu\ojoin}}

\pagestyle{headings}
\setcounter{tocdepth}{5} %show more in the toc

\begin{document}

\title{Type-checking knowledge graphs}

\author{Iztok Savnik\inst{1}} 

\authorrunning{I. Savnik et al.}

\institute{Faculty of mathematics, natural sciences and information technologies, \\
  University of Primorska, Slovenia \\
  \email{iztok.savnik@upr.si}}

\maketitle

\begin{abstract}
  We first present a formal view of a knowledge graph. On this basis,
  the type-checking rules are developed to define correct typing
  relationships among the triples of a knowledge graph. We discuss the
  algorithms for verifying the typing relationships against the given
  knowledge graph. Finally, we present the experimental results of
  type-checking the Yago4 knowledge graph.

\keywords{type checking \and knowledge graphs \and RDF stores \and graph databases.}
\end{abstract}

%\newpage
%\tableofcontents
%\newpage

\thispagestyle{headings}
\tableofcontents
\newpage

\section{Introduction}

Introduction to KGs ... \cite{Hogan2022,Ehrlinger2016}.

\notes{KGs are becoming KBs...}
\notes{What are the structural characteristics of KBs?}
\notes{What KBs can represent that (classical) data models can not.}
\notes{Relations between the knowledge bases and KGs.}

\notes{About the very (complex) KG domain.}
\notes{We have a specific domain, i.e., a knowledge graph including nodes and triples.}
\notes{The class identifiers are ordered in poset and, consequently, triples are also poset.}
\notes{$\Lambda$-expressions form a domain expressing derivations of $\lambda$-expressions.}
\notes{??}

On the type theory, using type theory, some keystones,
... \cite{Pierce2002,Hindley1997}.
On intersection and union types and their use in type-checking
\cite{Pierce2002,Dezani2020,Pierce1991}.

\notes{Problem definition.}
\notes{Checking the types of ground triples.}
\notes{Errors in typing of a KG.}
\notes{Typing BGP queries.}
\notes{Typing triple patterns!}
\notes{Rules for TPs.}
\notes{}

\notes{Abstract of the method.}
\notes{Give an abstract insight into the structure of KB. Identifiers, schema, types, ...}
\notes{Show the ground triples, poset of triples.types triples, schema graph, etc.}





\section{Preliminaries}

\subsection{Knowledge graph}

This section defines a knowledge graph as a RDF graph \cite{rdf} using
RDF-Schema \cite{rdfschema} for the representation of the structural
part of a knowledge base.

Let $I$ be the set of URI-s, $B$ be the set of blanks and $L$ be the
set of literals. Let us also define sets $S = I\cup\/B$, $P = I$, and
$O = I\cup\/B\cup\/L$.

Let $I$ be the set of URI-s, $B$ the set of blanks and $L$ be the set
of literals. Let us also define sets $S = I\cup\/B$, $P = I$, and
$O = I\cup\/B\cup\/L$.

\emph{RDF triple} is a triple $(s,p,o)\in\/S\times\/P\times\/O$.
\emph{RDF graph} $g\subseteq\/S\times\/P\times\/O$ is a set of
triples. Set of all graphs will be denoted as $G$. We suppose the
existence of a set of variables $V$ and the set of \emph{terms}
$T = O\cup\/V$. Term $t\in\/T$ is ground if $t\in\/O$.

We say that RDF graph $g_1$ is \emph{sub-graph} of $g_2$, denoted
$g_1 \sqsubseteq g_2$, if all triples in $g_1$ are also triples from
$g_2$. 

\notes{Define major structure of KG on the basis of the sorts of data.}
\notes{...the set $I$ includes individual identifiers $I_i$, class identifiers $I_c$ and predicate identifiers $I_p$.}

\subsection{Rule language}

\notes{Put somewhere general discussion on rules.}
\notes{What elements of rule are reasonable. Criterium: tracable elements of rule.}
\notes{What is tracable? Looping on a "selected" set. Loop may go thruogh elements of a set, all more specific/general elements, etc.}
\notes{They are extended to handle poset of identifiers that can form triples.}






\section{Typing identifiers}

\notes{Intro to typing idents.}
\notes{Typing idents without considering info about the triples.}

The individual and class entities are represented by identifiers from
the set $\I$. The individual identifiers $\Ii$ stand for literals,
concrete and abstract entities. The class identifiers $\Ic$ represent
abstract entities that have an unempty interpretation. The abstract
entities include, besides the identifiers of user-defined classes,
the types (classes) of literals.

A graph database includes stored definitions for typing the individual
identifiers, and for representing the specialization/generalization
hierarchies of classes and properties.

\nl
\notes{Details.}
\notes{1. First define base type of identifiers $:_1$ and stored subtyping relationship $\preceq_1$.}
\notes{2. From the basis define the indent typing $:$ and subtyping rel $\preceq$ among identifiers.}
\notes{3. Include the link between subtyping and typing.}
\notes{4. Define lub type using $\land$ type for a given ground ident.}






\subsection{Typing literals}

Literals are the values of an atomic type. The atomic types are in RDF
provided by the RDF-Schema dictionary \cite{rdfschema}. RDF-Schema
defines a list of atomic types, such as xsd:integer, xsd:string, or
xsd:boolean.

Typing of the atomic types is determined by the following rule.

\begin{equation}
\dfrac{L\in\I_l, T\in\I_c,\, \text{"L"\textasciicircum\textasciicircum\/T}\in\Lt}
      {L:T}  
\end{equation}

The rule states that a literal value $L$ is of a type $T$ if a literal
"L"\textasciicircum\textasciicircum\/T is an element of the set of
literals $\Lt$. A literal "L"\textasciicircum\textasciicircum\/T
includes a literal value $L$ and a literal type $T$ referencing a type
from the RDF-Schema dictionary. As an example, the literal
"365"\textasciicircum\textasciicircum\/xsd:integer includes the
literal value 365 and its type xsd:integer.




\subsection{Intersection and union types}

The instances of the intersection type $T_1\land\/T_2$ are objects
belonging to both $T_1$ and $T_2$. The type $T_1\land\/T_2$ is the
greatest lower bound of the types $T_1$ and $T_2$. In general,
$\land[T_1\ldots\/T_n]$ is the greatest lower bound of types
$T_1\ldots\/T_n$ \cite{Pierce1991,Pierce1996}.

\begin{equation}
T_1\land\/T_2\preceq\/T_1    
\end{equation}

\begin{equation}
T_1\land\/T_2\preceq\/T_2  
\end{equation}

\begin{equation}
\land[T_1\ldots\/T_n] \preceq\/T_i  
\end{equation}

If the type $S$ is more specific than the types $T_1\ldots\/T_n$ then
$S$ is more specific then $\land[T_1\ldots\/T_n]$. First, we present
the rule for a pair of types $T_1$ and $T_2$.

\begin{equation}
\dfrac{S\preceq\/T_1\quad\/S\preceq\/\/T_2}
      {S\preceq\/T_1\land\/T_2}  
\end{equation}

\begin{equation}
\label{rul:intsc-gather}
\dfrac{\text{forall i,\ } S\preceq\/T_i}
      {S\preceq\land[T_1\ldots\/T_n]}  
\end{equation}



The intersection and union types are dual. This can be seen also from
the rules that are used for each particular type.

The instances from the union type $T_1\lor\/T_2$ are either the
instances of $T_1$ or $T_2$, or the instances of both types. The type
$T_1\lor\/T_2$ is the smallest upper bound of the types $T_1$ and
$T_2$. In general, $\lor[T_1\ldots\/T_n]$ is the smallest upper bound
of types $T_1\ldots\/T_n$ \cite{Pierce1991}.

\begin{equation}
T_1\preceq\/T_1\lor\/T_2    
\end{equation}

\begin{equation}
T_2\preceq\/T_1\lor\/T_2  
\end{equation}

\begin{equation}
T_i\preceq\/\lor[T_1\ldots\/T_n]  
\end{equation}

If the type $T$ is more general than the types $S_1\ldots\/S_n$ then
$T$ is more general then $\lor[S_1\ldots\/S_n]$. First, we present
the rule for types $T_1$ and $T_2$.

\begin{equation}
\dfrac{S_1\preceq\/T\quad\/S_2\preceq\/\/T}
      {S_1\lor\/S_2\preceq\/T}  
\end{equation}

\begin{equation}
\dfrac{\text{forall i,\ } S_i\preceq\/T}
      {\lor[S_1\ldots\/S_n]\preceq\/T}  
\end{equation}








\subsection{Stored typing and subtyping of identifiers}

Let us introduce the typing and specialization/generalization
relationships formally. The expression $i:_\darr\/C$ states that a
class $C$ is a type of an individual identifier $i$. The expression
$i_1\preceq_\darr\/i_2$ defines the sub-class relationship between the
class identifiers $i_1$ and $i_2$. The index '$\darr$' in relations
$:_\darr$ and $\preceq_\darr$ denotes that the relationships is stored
in a database. Such notation allows us to address differently the
stored and the derived parts of the graph database schema.

%\notes{Partial ordering defined with stored schema triples in a database.}
%\notes{The relationships that poset $\preceq_1$ covers are rdfs:subClassOf and rdfs:subPropertyOf. }
%\notes{Identifiers included in $:_1$ are between ground idents and base classes.}
%\notes{This allows us to separate and also address separately the ssg and subtyping relationship.}

\memo{Oportunity to introduce ``mixed'' objects including ground and schema components.}

The rule for the one-step relationship $:_\darr$ is defined using the
predicate rdf:type.

\begin{equation}
\dfrac{I\in\Ii\quad I_c\in\Ic\quad (I,\text{rdf:type},I_c)\in \D}
      {I :_\darr I_c}
\end{equation}

The individual entity $I$ can have more than one stored types, e.g.,
$I_{c1}$ and $I_{c2}$. Therefore, $I:_\darr\/I_{c1}$ and
$I:_\darr\/I_{c2}$ holds, and we can instead write
$I:_\darr\/I_{c1}\land\/I_{c2}$. All existing stored typings of $I$
can be gathered by Rule \ref{rul:3-ground-gather} presented later.

A one-step subtyping relationship $\preceq_\darr$ is defined by means
of the RDF predicate rdfs:sub\-ClassOf in the following rule.

\begin{equation}
\dfrac{I_1,I_2\in\Ic \quad (I_1,\text{rdfs:subClassOf},I_2)\in \D}
{I_1 \preceq_\darr\/I_2}
\end{equation}

The rule for the definition of the one-step subtyping relationship
$\preceq_\darr$ is based on the predicate rdfs:subPropertyOf.

\begin{equation}
\dfrac{I_1,I_2\in\Ip \quad (I_1,\text{rdfs:subPropertyOf},I_2)\in \D}
      {I_1\preceq_\darr\/I_2}
\end{equation}




\subsection{Typing and subtyping identifiers}

The one-step relationships $:_\darr$ and $\preceq_\darr$ are now
extended with the reflexivity and transitivity to obtain the
relationships $:$ and $\preceq$. The relation $\preceq$ forms a
partial ordering of class
identifiers. %Further, the subtyping relation $\preceq$ is used to
%extend typing relation $:$ with the rule of \emph{subsumption}.

First, the one-step relationship $\preceq_s$ is generalized to the
relationship $\preceq$ defined over class identifiers $\Ic$.

\begin{equation}
\label{rul:Ic-extended}
\dfrac{I_1,I_2\in\Ic \quad I_1\preceq_\darr I_2}
      {I_1 \preceq I_2}
\end{equation}

Next, the subtyping relationship $\preceq$ is reflexive.

\begin{equation}
\label{rul:Ic-reflexivity}
\dfrac{S\in \Ic}
      {S\preceq\/S}
\end{equation}

The subtype relationship is also transitive. 

\begin{equation}
\label{rul:Ic-transitivity}
\dfrac{S,U,T\in\Ic \quad S\preceq\/U \quad U\preceq\/T}
      {S\preceq\/T}   
\end{equation}

Finally, the subtype relationship is asymmetric which is expressed
using the following rule. 

\begin{equation}
\label{rul:Ic-antisymmetry}
\dfrac{S,U\in\Ic \quad S\preceq\/U \quad U\preceq\/S}
      {S=T}   
\end{equation}

As a consequence of the rules
\ref{rul:Ic-reflexivity}-\ref{rul:Ic-antisymmetry} the relation
$\preceq$ is a poset.

Knowledge graphs include a special class $\top$ that represents the
root class of the ontology. In RDF ontologies $\top$ is usually
represented by the predicate owl:Thing. The following rule specifys
that all class identifiers are more specific than $\top$.

\begin{equation}
\dfrac{\forall\/S\in\Ic}
      {S\preceq\top}
\end{equation}

%\subsection{Typing of identifiers.}
The stored typing relation $:_\darr$ is now extended to the typing
relation $:$ that takes into account the subtyping relation $\preceq$.
The following rule states that a stored type is a type.

\begin{equation}
\dfrac{I\in\Ii \quad C\in\Ic \quad I:_\darr\/C}
      {I:C}
\end{equation}

The link between the typing relation and subtype relation is provided
by adding a typing rule called \emph{rule of subsumption}
\cite{Pierce2002}.

\begin{equation}
\dfrac{I\in\Ii\quad S\in\Ic\quad I:S \quad S\preceq\/T}
      {I:T}    
\end{equation}


\notes{Properties have dual role: they are instances and types at the same time.}
\notes{Present the features of properties from this point of view.}

\memo{Put together the base types of ground identifiers using $\land$ type.}
\memo{First, the base type of an ground identifier is the $\land$ of all base types.}
\memo{The \emph{base type} of a ground identifier is defined explicitely!}

\memo{The lub types of base types B are the smallest types related to all base types.}
\memo{The lub types are related by $\land$ to form a (complete) type of a ground identifier.}
\memo{The complete type of a ground identifier is defined explicitely.}








\section{Typing triples}

\notes{There are two basic aspects of a triple type.}
\notes{First, the type is computed bottom-up: from the stored types of triple components.}
\notes{Second, the type can be computed top-down: from the user-defined domain/range types of properties.}

\notes{About the types that are computed bottom-up.}
\notes{Ground type of a triple is computed first using $:_\darr$.}
\notes{Next, the lub type of a triple is derived using $:_\sqcup$.}

\notes{About the stored types that are computed as glb of valid stored types.}
\notes{From the top side of the ontology, the stored type $:_\uarr$ is determined based on $p$.}
\notes{The glb types of all types obtained using $:_\uarr$ obtaining a glb type $:_\sqcap$.}
\notes{Finally, the type $:$ of $t$ is deterimned by summing alternative $:_\uarr$ types.}

\notes{Unfinished!!}
\notes{Interactions between the $\land/\lor$ types of triple components and triples must be added.}
\notes{Analogy between the types of functions in LC and types of triples.}
\notes{Show rules relating $\land/\lor$ types and triple types. Example.}
\notes{E.g., $(S_1\land\/S_2)*p*R = S_1*p*R\land\/S_2*p*R$.}
\notes{Are all rules covered?}

\notes{Unfinished!!}

\notes{Predicates should be treated in the same way as the classes.}
\notes{They can have a rich hierarchy.}
\notes{\emph{Note:} Where to include discussion on special role of predicates and their relations to classes?}
\notes{Mention Cyc as the practical KB with rich hierarchy of predicates.}



\subsection{Product types}



\subsection{Deriving a ground type of a triple}

\noindent
A ground type of an individual identifier $i$ is a class $C$ related
to $i$ by one-step type relationship $:_\darr$ denoting a ground
type. In terms of the concepts of a knowledge graph, $C$ and $i$ are
related by the relationship rdf:type.

A ground type of a triple $t=(s,p,o)$ is a triple $T=T_s*p*T_o$ that
includes the ground types of $t$'s components $s$ and $o$, and the
property $p$ which now has the role of a type. A ground type of a
triple is defined by the following rule.

\begin{equation}
\label{rul:3-ground}
\dfrac{t\in\/\Ti,\ t=(s,p,o)\quad I_s,I_o\in\Ic,\ s:_\darr\/I_s\land\/o:_\darr\/I_o\quad p:_\darr\text{rdf:Property}}
      {t:_\darr\/I_s*p*I_o}
\end{equation}

The class $I_s$ is one of the ground types of $s$, and the type $I_o$
is one of the ground types of $o$. The predicates are treated
differently to the subject and object components of triples. The
predicates have the role of classes while they are instances of
rdf:Property.

There can be multiple ground types of a triple. They may be gathered
into a single $\land$-type by using the following rule. The types
$T_1$,\ldots,$T_n$ are obtained using Rule~\ref{rul:3-ground}.

\begin{equation}
\label{rul:3-ground-gather}
\dfrac{t\in \T_i\quad \forall\/T_i\in\T_t,\ t:_\darr\/T_i}
      {t:_\darr\land[T_i]}
\end{equation}


\notes{Typing using lub types of $T_1..T_n$. Explain why this is needed?}

Let us now define the least upper bound types (abbr. \emph{lub}) of
ground types derived by Rule \ref{rul:3-ground-gather}. Since a
partialy ordered set is not a lattice, we can have more than one lub
type for a given set of ground types.

The lub types of a given list of triple types $T_1..T_n$ are
computed in two steps as before when gathering multiple ground types
with conjunction. A single lub type is defined as follows.

\begin{equation}
\dfrac{t:_\darr\land[T_1..T_n]\quad T\in\Tt\quad \forall\/i,\ T_i\preceq\/T\quad \forall\/S\in\T_t,\ \forall\/i,\ T_i\preceq\/S\land\/T\preceq\/S}
      {\vdash\/t:_\sqcup\/T}
\end{equation}

The above rule states that a type $T$ is a lub type of a ground type 
$\land[T_1..T_n]$ if all ground types $T_i$ are subtypes of
$T$. Furthermore, the lub type $T$ is the least (closest) supertype of
all members of ground $\land$-type $T_1,\ldots\/,T_n$. The lub types
can be now gathered using the following rule.

\begin{equation}
\dfrac{\forall i, T_i\in\Tt\quad t:_\sqcup\/T_i}
      {t:_\sqcup\land[T_1..T_n]}
\end{equation}


\memo{The types of $s$ and $o$ can be any classes $T_s$ and $T_o$ from
  ${\cal I}_c$, while the type of $p$ has to be a class $T_p$ that is
  a subclass of rdf:Property. The typing of a triple $t$ is correct
  since the interpretation of $T$ includes $t$.}

\memo{Moreover, the types $T$ that are derived by the above rule are
  minimal in the sense that given the information provided, i.e., the
  types of $t$'s components, their interpretations are minimal
  possible comparing them to the interpretations of all other derived
  types of $t$.}






\subsection{Stored types of triples}

\notes{General comments.}
\notes{Analysis tool. Show minimality of the stored types (either enumerated or gathered with $\bigvee$).}
\notes{\emph{Reminder:} when a complete stored (user-defined) type is related to the base type of a triple, some of GLB types may be eliminated.}

\notes{Present the complete story.}
\notes{Computing the minimal and valid stored type of a triple $t=(s,p,o)\in\T_i$.}
\notes{Stored types are defined by linking a predicate $p$ to a domain and range classes.}
\notes{Only types (domains and ranges) defined for $p'\succeq\/p$ are valid stored types.}
\notes{There are no other valid types below, i.e., for $p'\prec\/p$.}
\notes{Among the valid stored types the most specific and unrelated stored types are selected.}
\notes{In other words, only glb types of valid stored types are selected.}
\notes{Finally, the minimal and complete type of $t$ is an $\lor$-type including all previously selected glb types.}

We first find stored triple types for a given triple $t=(s,p,o)$. A
stored schema triple is constructed by selecting types including a
predicates $p'\succeq\/p$ that  the domain and range defined.

\begin{equation}
\label{rul:3-stored}
\dfrac{t\in\T_i,\, t=(s,p,o)\quad p'\in\I_p, p\preceq\/p'\quad (p',\text{domain},T_s)\in\/g\quad (p',\text{range},T_o)\in\/g}
      {t:_\uarr(T_s,p,T_o)}
\end{equation}


\medskip
%\notes{Generator view of rules: Just describe the properties of pre-conditions and conclusions for a particular lub type of triple.}
\notes{Comments and description of the above rule.}
\notes{Note p is used for all types. p shoud be in most specific type -}
\notes{It makes no sense to generate types with p'.} 

The domain and range of a predicate $p$ can be defined for any
super-predicate, they do not need to be defined particulary for
$p$. In addition, the domain and range of a predicates do not need to
be defined for the same predicate; they can be defined for any of the
super-predicates separately. The following rule captures also the last
statement.

\medskip
\notes{Somewhere here, the inheritance should be noted.}
\notes{Inheritance should be treated in knowledge graphs!}
\notes{Predicates inherit in the same way as the classes.}

\begin{equation}
\label{rul:3-stored1}
\dfrac{t\in\Ti, t=(s,p,o)\quad p_1,p_2\in\I_p\quad p\preceq\/p_1\quad p\preceq\/p_2\quad (p_1,\text{domain},T_s)\in\/g
                \quad (p_2,\text{range},T_o)\in\/g}
      {t:_\uarr(T_s,p,T_o)}
\end{equation}

\notes{Explanation of the rule.}
\notes{If $p$ inherits from multiple $p'\succeq\/p$, then the above rule generates multiple types. Explain.}
\notes{Note that the type is determined only if the domain and range of $p$ or some $p'\succeq\/p$ is defined.}
\notes{Otherwise, the domain and range shoud be $\top$. This should be included.}

The following rule is a judgment for a (user-defined) type of a
concrete triple $t=(s,p,o)$. A user-defined type of $t$ is the
greatest lower bound (abbr. glb) of stored types generated by the rule
\ref{rul:3-stored}.

\medskip
\notes{Valid stored types of t: the smallest valid glb types of all stored types.}
\notes{Justification: smallest interpretation - smallest search space for queries.}
\notes{Valid stored types are solely those defined "above" p.}
\notes{The glb types of valid stored types "above" p is selected!}
\notes{The rule generates one glb type by one.}
\notes{These (glb types) are collected in a $\lor$-type including all GLB types.}

\notes{The meaning of $\not\sim$ is "\emph{not related}".}
\notes{This can be either that we have two $p$ roots with unrelated glb schema triples (trees up).}
\notes{Or, two $p$-rooted but unrelated stored types through multiple inheritance.}
\notes{Therefore, we can have more than one stored GLB types.}

\begin{equation}
\dfrac{t\in\T_i\quad T_i\in\T_t,\, t:_\uarr\/T_i\quad \forall\/S\in\T_t,\, t:_\uarr\/S\quad T_i\preceq\/S\lor\/T_i\not\sim\/S}
      {t:_\sqcap\/T_i}
\end{equation}

The first premise says that $t$ is a ground triple. The second premise
enumerates stored types $T_i$ of $t$. The third premise requires that
$T_i$ is the most specific type of all possible types $S$ of $t$. In
other words, there is no type $S$ of $t$ that is a subtype of
$T_i$. Hence, $T_i$ is the glb type of the stored types of $t$.

The implementation view of the above rule is as follows. The schema
triples are obtained from the inherited values of the predicates
rdfs:domain and rdfs:range. The inherited values have to be the
closest when traveling from property $p$ towards the more general
properties.

The glb types are now gathered in a $\lor$-type. Hence, the resulting
$\lor$-type includes all glb types of $t$.

\begin{equation}
\dfrac{\forall\/T_i\in\T_t,\, t:_\sqcap\/T_i}
      {t:_\sqcap\lor[T_i]}
\end{equation}

The premise says that we identify all triple types $T_i$ that
are the individual (glb) $\sqcap$-types of $t$. 

\medskip
\notes{What is the reason that we have multiple glb types?}

Multiple different stored types of $t$ are possible only in
the case of multiple inheritance, in the case of the definition of the
disjunctive domain/range types, or if predicate is defined for
semantically different concepts.

\notes{Describe each possibility in more detail.}





\subsection{Typing a triple}

\notes{Two ways of defining semantics.}
\notes{1) enumeration style: stored types are enumerated as alternatives ($\lor$).}
\notes{2) packed together: alternative types are packed in one $\bigvee$ type.}
\notes{One advantage of (1) is that individual glb types can be processed further individually.}
\notes{Advantage of (2) is the higer-level semantics without going in implementation.}

\notes{Now stored types have to be related to all lub base types to represent the correct type of a triple.}
\notes{It seems it would be easier to check the pairs one-by-one using (1) in algorithms.}
\notes{In case of using complete types in the phases, types would further have to be processed by $\land,\lor$ rules.}

The type of a triple $t=(s,p,o)$ is computed by first deriving the
base type $T$ and the top type $S$ of $t$. Then, we check if $S$ is
reachable from $T$ through the sub-class and sub-property hierarchies,
i.e., $T\preceq\/S$.

\begin{equation}
\dfrac{t\in\T_i\quad T\in\T_t,\, t:_{\darr}T\quad S\in\T_t,\, t:_\uarr\/S\quad T\preceq\/S}
      {t:S}
\end{equation}

\medskip

\medskip
\notes{How to compute $T\preceq\/S$? Refer to position where we have a description.}
\notes{Order the possible derivations, gatherings (groupings) ... of types.}

\notes{Possible diagnoses.}
\notes{Components not related to a top type of a triple?}
\notes{Components related to sub-types of a top type?}
\notes{Above pertain to all components.}




\subsection{Typing a graph}

\notes{What is a type of a graph?}
\notes{A type of a graph is a graph!}
\notes{It includes a set of schema triples forming a schema graph.}

\notes{Typing a graph bottom-up?}
\notes{Checking that all the triples are of correct types.}




\subsection{Typing schema triples}

\notes{What can be checked?}
\notes{Is a schema triple properly related to the super-classes and types of components.}
\notes{Consistency of the placement of a class in an ontology. What is this?}
\notes{A class or predicate component not related to other classes?}
\notes{A class or predicate component attached to ``conflicting'' set of classes? What can be detected?}
\notes{Any other examples?}
\notes{}





\section{Implementation of type-checking}


\subsection{Computing LUB ground types}

\notes{The ground types of a triple $t=(s,p,o)$ are computed first as a type $(s_t,p,o_t)$ such that $(s,rdf:type,s_t)$ and $(o,rdf:type,o_t)$.}
\notes{The set of all types $s_t$ ($o_t$) is stored in a set $g_s$ ($g_o$).}
\notes{The ground type of $t$ is then $T_t=(\land\/g_s,p,\land\/g_o)$.}
\notes{The lub of a type $T_t$ is computed as follows.}

\notes{For each $s_t\in\/g_s$ ($o_t\in\/g_o$) compute a closure of a set $\{s_t\}$ ($\{o_t\}$) with respect to the relationship rdfs:superClassOf obtaining the sets $c_s$ and $c_o$.}
\notes{Each step of the closure newly obtained classes are marked with the number of steps if new in the set, and the maximum of both numbers of steps otherwise.}
\notes{The maximum guaranties the monotonicity: $s_t\prec_\darr\/s_t'\Rightarrow\/m(s_t)>m(s_t')$.}
\notes{Proof: Assume $m(s_t)<=m(s_t')$. Since $s_t\prec_\darr\/s_t'$ then $m(s_t')+1$ is maximum of $s_t$. Contradiction.}

\notes{The lub of $T_t$ is computed by intersecting all sets $c_s$ ($c_o$) obtained for each $s_t$ ($o_t$), yielding a lub type of $g_s$ ($g_o$).}
\notes{The intersection of sets is computed step-by-step. Initially, intersection is the first set $c_s$ ($c_o$) of some $s_t$ ($o_t$).}
\notes{In each step, a new set $c_s$ ($c_o$) for another $s_t$ ($o_t$) is intersected with previous result.}
\notes{The classes that are in the result (intersection) are merged by selecting the maximum number of closure steps for each class in the intersection.}
\notes{The reason for this is to obtain the number of steps within which all ground classes reach a given lub class.}

\notes{Finally, the lub classes are selected from the resulted intersection of all $c_s$ ($c_o$).}
\notes{The class with the smallest number of steps is taken. Then, it is deleted from the set together with all its super-classes.}
\notes{If set is not empty the previous step is repeated.}

\subsection{Computing GLB stored types}


\notes{We have a tuple $t=(s,p,o)$.}
\notes{The task is to compute glb of $t$'s stored types.}
\notes{The algorithm is using the predicates $p'\preceq\/p$ to obtain all domains and ranges of $p$.}



\notes{FUNCTION typeGlbStored ($p$: Property, $cnt$: Integer): Type}
\notes{BEGIN}
\notes{if $d_p=\{\})$ then $d_p =  \{ c_s \mid (p,\text{rdfs:Domain},c_s)\in\/G\}$}
\notes{if $r_p=\{\})$ then $r_p =  \{ c_o \mid (p,\text{rdfs:Range},c_o)\in\/G\}$}
\notes{if $d_p\not=\{\}\land\/r_p\not=\{\})$ then }
\notes{RETURN $(\lor\/d_p,p,\lor\/r_p)$}
\notes{$ts = \{\}$}
\notes{for $p'$ ($(p,\text{rdfs:začnemo graditi.SubPropertyOf},p')\in\/G$)}
\notes{BEGIN}
\notes{$T_{p'} = typeGlbStored(p',cnt+1$)}
\notes{$ts = ts\cup\/\{T_{p'}\}$}
\notes{END}
\notes{RETURN $\lor\/ts$}
\notes{END}




%\notes{Start with a set $\{p\}$ and close the set by using rdfs:superPropertyOf marking them with the ``distance'' from $p$.}
%\notes{Gather all domain and range types of $p'\preceq\/p$ in $d_p$ and $r_p$, respectively, marking each domain and range class with the distance of the related $p'$.}
%\notes{Generate types $\lor(s_t,p,o_t)$ where $s_t\in\/d_p$, $o_t\in\/r_p$ and both $s_t$ and $o_t$ are marked with the minimal values.}
%\notes{Note that there can be more than one element $s_t$ (and $o_t$) marked with a minimal value in $d_p$ (and $r_p$). Hence Cartesian product of the selected domains and ranges are used to generate types $(s_t,p,o_t)$. }



\subsection{Relating LUB ground and GLB stored types}






\section{Conclusions}



% \section{Acknowledgments}
%
%The authors acknowledge the financial support from the Slovenian Research Agency (research core funding No. P1-00383).

\bibliographystyle{abbrv}
\bibliography{biblio}

\end{document}



= rules for identifiers
- assumtions
. suppose we have I, a set of identifiers from g
. suppose we have a 

- type-check literals


.................before 05/27/22....................

= (task) general picture
- we have graph pattern 
. a set of triples including consts and vars
- we derive types of TPs



- we derive types of GPs


= (task) determine a type of a TP
. type of TP without a predicate? use rdf:predicate.
. type of TP without the schema? use generalizations.
. type of TP with predicate? use a triple type defined as the schema.
. type of TP can be \cup of triple types (defined in the schema).


= (task) compute a type of a GP
. meeting points in GP: use \cap type constructor
. \cap of \cup of triple types can select one of triple types
. one triple type is selected by other oper of \cap


= (task) compute the type of a concrete triple
- we need a type of a concrete triple, e.g. for distribution
. if we have schema triple than it can be utilized
. obtain the type of each constant
. schema type, or, the most specific type?
